<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.spark.member.repository.MemberMapper">

    <resultMap id="memberResultMap" type="Member">
        <result column="mem_Id" property="memId"/>
        <result column="mem_pwd" property="memPwd"/>
        <result column="mem_name" property="memName"/>
        <result column="mem_gender" property="gender"/>
        <result column="mem_nickName" property="nickName"/>
        <result column="mem_birth" property="birthDate"/>
        <result column="mem_location" property="location"/>
        <result column="mem_Info" property="memInfo"/>
        <result column="mem_occupation" property="occupation"/>
        <result column="mem_education" property="education"/>
        <result column="mem_mbti" property="mbti"/>
        <result column="mem_tall" property="tall"/>
        <result column="mem_religion" property="religion"/>
        <result column="mem_smock" property="smock"/>
        <result column="mem_status" property="status"/>
        <result column="mem_regist_date" property="registDate"/>
        <result column="mem_cookie" property="cookie"/>
        <result column="mem_interest" property="interest"/>
        <result column="mem_tendencies" property="tendencies"/>
        <result column="mem_character" property="character"/>
        <result column="MEM_PROFILE" property="proFile"/>
        <result column="mem_age" property="age"/>

    </resultMap>


    <!-- 로그인 -->
    <select id="loginMember" resultMap="memberResultMap">

        select
        mem_id
        , mem_pwd
        , MEM_NAME
        , MEM_GENDER
        , MEM_NICKNAME
        , MEM_BIRTH
        , MEM_LOCATION
        , MEM_INFO
        , MEM_OCCUPATION
        , MEM_EDUCATION
        , MEM_MBTI
        , MEM_TALL
        , MEM_RELIGION
        , MEM_SMOCK
        , MEM_STATUS
        , MEM_REGIST_DATE
        , MEM_COOKIE
        , MEM_INTEREST
        , MEM_TENDENCIES
        , MEM_CHARACTER
        , MEM_PROFILE
        , MEM_AGE
        from
        member
        where
        mem_id = #{memId}


    </select>

    <!-- 유효성 검사후 멤버값 리턴 -->
    <select id="loginUserInfo" resultMap="memberResultMap">

        select
        mem_id
        , mem_pwd
        , MEM_NAME
        , MEM_GENDER
        , MEM_NICKNAME
        , MEM_BIRTH
        , MEM_LOCATION
        , MEM_INFO
        , MEM_OCCUPATION
        , MEM_EDUCATION
        , MEM_MBTI
        , MEM_TALL
        , MEM_RELIGION
        , MEM_SMOCK
        , MEM_STATUS
        , MEM_REGIST_DATE
        , MEM_COOKIE
        , MEM_INTEREST
        , MEM_TENDENCIES
        , MEM_CHARACTER
        , MEM_PROFILE
        , MEM_AGE
        from
        member
        where
        mem_id = #{memId}


    </select>

    <!-- 필터에서 유효형검사 -->
    <select id="findById" resultMap="memberResultMap">
        SELECT MEM_ID
        , MEM_PWD
        , MEM_NAME
        , MEM_GENDER
        , MEM_NICKNAME
        , MEM_BIRTH
        , MEM_LOCATION
        , MEM_INFO
        , MEM_OCCUPATION
        , MEM_EDUCATION
        , MEM_MBTI
        , MEM_TALL
        , MEM_RELIGION
        , MEM_SMOCK
        , MEM_STATUS
        , MEM_REGIST_DATE
        , MEM_COOKIE
        , MEM_INTEREST
        , MEM_TENDENCIES
        , MEM_CHARACTER
        , MEM_PROFILE
        , MEM_AGE
        FROM
        MEMBER
        WHERE
        MEM_ID = #{memId};
    </select>


    <!-- 리프레시 토큰 db저장 -->
    <insert id="insertRefreshToken">
        INSERT
        INTO
        refresh_token
        (
        MEM_ID
        , rt_info
        )
        VALUES
        (
        #{memId}
        , #{refreshToken}
        )
    </insert>


    <!-- 리프레시 토큰 db에 있는지 확인 -->
    <select id="checkRefreshToken">
        select
        count(rt_info)
        from
        refresh_token
        where
        mem_id = #{memId}
    </select>

    <!-- 리프레시토큰 보유시 수정 -->
    <delete id="updateRefreshToken">
        update
        refresh_token
        set
        rt_info = #{refreshToken}
        where
        mem_id = #{memId}
    </delete>


    <!-- 토큰 제거 -->
    <delete id="deleteToken">
        DELETE
        FROM refresh_token
        WHERE mem_id = #{userId};
    </delete>


    <!-- 회원가입 -->
    <insert id="signUp">
        insert
        into
        member
        (
        mem_id
        , mem_pwd
        , mem_status
        )
        values
        (
        #{memId}
        , #{memPwd}
        , 'A'
        )

    </insert>

    <!-- 회원 정보 입력 -->
    <update id="insertInfo">

        update
        member
        set
        MEM_NAME = #{memName}
        , MEM_GENDER = #{gender}
        , MEM_NICKNAME = #{nickName}
        , MEM_BIRTH = #{birthDate}
        , MEM_LOCATION = #{location}
        , MEM_INFO = #{memInfo}
        , MEM_OCCUPATION = #{occupation}
        , MEM_EDUCATION = #{education}
        , MEM_MBTI = #{mbti}
        , MEM_TALL = #{tall}
        , MEM_RELIGION = #{religion}
        , MEM_SMOCK = #{smock}
        , MEM_STATUS = 'Y'
        , MEM_INTEREST = #{interest}
        , MEM_TENDENCIES = #{tendencies}
        , MEM_CHARACTER = #{character}
        , MEM_PROFILE = #{proFile}
        , MEM_AGE = #{age}
        where
        mem_id = #{memId}
    </update>


    <!-- 추천 리스트 -->
    <select id="recommendList" resultMap="memberResultMap">
        SELECT
        DISTINCT
        mem_id
        , mem_pwd
        , MEM_NAME
        , MEM_GENDER
        , MEM_NICKNAME
        , MEM_BIRTH
        , MEM_LOCATION
        , MEM_INFO
        , MEM_OCCUPATION
        , MEM_EDUCATION
        , MEM_MBTI
        , MEM_TALL
        , MEM_RELIGION
        , MEM_SMOCK
        , MEM_STATUS
        , MEM_REGIST_DATE
        , MEM_COOKIE
        , MEM_INTEREST
        , MEM_TENDENCIES
        , MEM_CHARACTER
        , MEM_PROFILE
        , MEM_AGE
        FROM MEMBER
        WHERE MEM_ID != #{memId}
        AND MEM_ID NOT IN (
        SELECT HIDDEN_TARGET
        FROM HIDDEN_PROFILE
        WHERE HIDDEN_ID = #{memId}
        )

        AND (
        <foreach collection="interest" item="item" separator=" OR ">
            mem_interest LIKE CONCAT('%', #{item}, '%')
        </foreach>
        OR
        <foreach collection="tendencies" item="item" separator=" OR ">
            mem_tendencies LIKE CONCAT('%', #{item}, '%')
        </foreach>
        OR
        <foreach collection="character" item="item" separator=" OR ">
            mem_character LIKE CONCAT('%', #{item}, '%')
        </foreach>
        )
        <choose>
            <when test="gender.equals('남')">
                AND mem_gender = '여'
            </when>
            <when test="gender.equals('여')">
                AND mem_gender = '남'
            </when>
        </choose>
        AND mem_id not in (
        SELECT IM_TARGET
        FROM INTERESTED_MEM
        WHERE IM_USER = #{memId}
        )
    </select>


    <!-- 추천삭제목록 -->
    <insert id="recommendDelete">
        insert
        into
        hidden_profile
        (
        hidden_id
        , hidden_target
        )
        values
        (
        #{hiddenId}
        , #{hiddenTarget}
        )

    </insert>


    <!-- 좋아요 테이블에 db삽입 -->
    <insert id="likeMember">
        insert
        into
        `like`
        (
        request_id
        , response_id
        )
        values
        (
        #{requestId}
        ,#{responseId}
        )
    </insert>


    <!-- 닉네임 중복검사 -->
    <select id="duplicateCheck">
        select
        count(mem_nickName)
        from
        member
        where
        mem_nickname = #{nickName}
    </select>


    <!-- 관심회원 체크 -->
    <select id="interestMemCheck">
        select
        count(*)
        from
        interested_mem
        where
        im_user = #{imUser}
        , im_target = #{imTarget}
    </select>


    <!-- 관심회원 등록 -->
    <insert id="interestMem">
        insert
        into
        interested_mem
        values
        (
        #{imUser}
        , #{imTarget}
        )
    </insert>


    <!-- 멤버 상세정보 -->
    <select id="detailInfo" resultMap="memberResultMap">
        select
        mem_id
        , MEM_NAME
        , MEM_GENDER
        , MEM_NICKNAME
        , MEM_BIRTH
        , MEM_LOCATION
        , MEM_INFO
        , MEM_OCCUPATION
        , MEM_EDUCATION
        , MEM_MBTI
        , MEM_TALL
        , MEM_RELIGION
        , MEM_SMOCK
        , MEM_STATUS
        , MEM_REGIST_DATE
        , MEM_INTEREST
        , MEM_TENDENCIES
        , MEM_CHARACTER
        , MEM_PROFILE
        , MEM_AGE
        from
        member
        where
        mem_id = #{memId}
    </select>


    <!-- 좋아요 목록 -->

    <select id="likeList" resultMap="memberResultMap">
        select m.mem_id
        , m.mem_nickname
        , m.mem_profile
        , m.mem_birth
        from `like` l
        join member m on m.mem_id = l.request_id
        where l.response_id = #{memId}
    </select>

</mapper>